// Code generated by goyacc -o parser/y.go -p yy parser/classad.y. DO NOT EDIT.

//line parser/classad.y:2
package parser

import (
	__yyfmt__ "fmt"

	"github.com/PelicanPlatform/classad/ast"
) //line parser/classad.y:2

//line parser/classad.y:10
type yySymType struct {
	yys      int
	node     ast.Node
	expr     ast.Expr
	classad  *ast.ClassAd
	attr     *ast.AttributeAssignment
	attrs    []*ast.AttributeAssignment
	exprlist []ast.Expr
	str      string
	integer  int64
	real     float64
	boolean  bool
}

const IDENTIFIER = 57346
const STRING_LITERAL = 57347
const INTEGER_LITERAL = 57348
const REAL_LITERAL = 57349
const BOOLEAN_LITERAL = 57350
const UNDEFINED = 57351
const ERROR = 57352
const OR = 57353
const AND = 57354
const EQ = 57355
const NE = 57356
const IS = 57357
const ISNT = 57358
const LE = 57359
const GE = 57360
const LSHIFT = 57361
const RSHIFT = 57362
const URSHIFT = 57363
const UNARY = 57364

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING_LITERAL",
	"INTEGER_LITERAL",
	"REAL_LITERAL",
	"BOOLEAN_LITERAL",
	"UNDEFINED",
	"ERROR",
	"'?'",
	"':'",
	"OR",
	"AND",
	"'|'",
	"'^'",
	"'&'",
	"EQ",
	"NE",
	"IS",
	"ISNT",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"LSHIFT",
	"RSHIFT",
	"URSHIFT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UNARY",
	"'!'",
	"'~'",
	"'.'",
	"'['",
	"'('",
	"']'",
	"';'",
	"'='",
	"')'",
	"'{'",
	"'}'",
	"','",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser/classad.y:265

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 114

var yyAct = [...]int8{
	75, 13, 73, 23, 21, 18, 19, 105, 24, 17,
	22, 12, 104, 109, 31, 38, 36, 37, 39, 40,
	41, 15, 103, 106, 9, 20, 10, 8, 9, 108,
	71, 65, 66, 16, 72, 67, 68, 69, 70, 27,
	26, 4, 3, 48, 78, 28, 29, 7, 42, 33,
	7, 60, 61, 82, 34, 83, 81, 47, 88, 89,
	90, 91, 46, 107, 95, 96, 79, 101, 92, 93,
	94, 97, 98, 99, 102, 84, 85, 86, 87, 80,
	62, 63, 64, 77, 76, 45, 5, 57, 58, 59,
	53, 54, 55, 56, 49, 50, 51, 52, 43, 100,
	44, 6, 7, 1, 74, 14, 110, 25, 30, 111,
	32, 11, 35, 2,
}

var yyPact = [...]int16{
	4, -1000, -1000, 46, -13, -1000, -1000, -16, -1000, 98,
	10, -1000, -1000, -1000, 87, 71, 47, 41, 26, 76,
	68, 61, 22, 49, -1000, -6, 10, 10, 10, 10,
	-1000, -9, -1000, 10, 10, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 43, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 95, 10, -1000, -1000, -1000,
	-1000, 10, -21, -33, -39, -1000, -17, -1000, 51, 71,
	47, 41, 26, 76, 68, 68, 68, 68, 61, 61,
	61, 61, 22, 22, 22, 49, 49, -1000, -1000, -1000,
	-1000, -11, -30, -1000, -1000, 10, -1000, 10, -1000, -1000,
	-1000, -1000,
}

var yyPgo = [...]int8{
	0, 113, 112, 41, 101, 0, 110, 108, 107, 8,
	3, 10, 4, 25, 6, 5, 9, 33, 21, 105,
	1, 104, 2, 103,
}

var yyR1 = [...]int8{
	0, 23, 1, 1, 2, 2, 3, 3, 3, 4,
	5, 20, 20, 19, 19, 18, 18, 17, 17, 16,
	16, 15, 15, 14, 14, 14, 14, 14, 13, 13,
	13, 13, 13, 12, 12, 12, 12, 11, 11, 11,
	10, 10, 10, 10, 9, 9, 9, 9, 9, 8,
	8, 8, 8, 7, 7, 7, 7, 7, 6, 6,
	6, 6, 6, 6, 22, 22, 21, 21,
}

var yyR2 = [...]int8{
	0, 1, 3, 2, 3, 2, 1, 3, 2, 3,
	1, 1, 5, 1, 3, 1, 3, 1, 3, 1,
	3, 1, 3, 1, 3, 3, 3, 3, 1, 3,
	3, 3, 3, 1, 3, 3, 3, 1, 3, 3,
	1, 3, 3, 3, 1, 2, 2, 2, 2, 1,
	3, 4, 4, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 3,
}

var yyChk = [...]int16{
	-1000, -23, -1, 38, -3, 40, -4, 4, 40, 41,
	42, -4, -5, -20, -19, -18, -17, -16, -15, -14,
	-13, -12, -11, -10, -9, -8, 30, 29, 35, 36,
	-7, 4, -6, 39, 44, -2, 6, 7, 5, 8,
	9, 10, 38, 11, 13, 14, 15, 16, 17, 18,
	19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
	29, 30, 31, 32, 33, 37, 38, -9, -9, -9,
	-9, 39, -5, -22, -21, -5, -3, 40, -5, -18,
	-17, -16, -15, -14, -13, -13, -13, -13, -12, -12,
	-12, -12, -11, -11, -11, -10, -10, -9, -9, -9,
	4, -5, -22, 43, 45, 46, 40, 12, 40, 43,
	-5, -20,
}

var yyDef = [...]int8{
	0, -2, 1, 0, 0, 3, 6, 0, 2, 8,
	0, 7, 9, 10, 11, 13, 15, 17, 19, 21,
	23, 28, 33, 37, 40, 44, 0, 0, 0, 0,
	49, 54, 53, 0, 64, 57, 58, 59, 60, 61,
	62, 63, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 45, 46, 47,
	48, 64, 0, 0, 65, 66, 0, 5, 0, 14,
	16, 18, 20, 22, 24, 25, 26, 27, 29, 30,
	31, 32, 34, 35, 36, 38, 39, 41, 42, 43,
	50, 0, 0, 55, 56, 0, 4, 0, 51, 52,
	67, 12,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 35, 3, 3, 3, 33, 17, 3,
	39, 43, 31, 29, 46, 30, 37, 32, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 12, 41,
	22, 42, 23, 11, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 38, 3, 40, 16, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 44, 15, 45, 36,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 13,
	14, 18, 19, 20, 21, 24, 25, 26, 27, 28,
	34,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:57
		{
			if lex, ok := yylex.(interface{ SetResult(ast.Node) }); ok {
				lex.SetResult(yyDollar[1].classad)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:66
		{
			yyVAL.classad = &ast.ClassAd{Attributes: yyDollar[2].attrs}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/classad.y:68
		{
			yyVAL.classad = &ast.ClassAd{Attributes: []*ast.AttributeAssignment{}}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:73
		{
			yyVAL.classad = &ast.ClassAd{Attributes: yyDollar[2].attrs}
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/classad.y:75
		{
			yyVAL.classad = &ast.ClassAd{Attributes: []*ast.AttributeAssignment{}}
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:80
		{
			yyVAL.attrs = []*ast.AttributeAssignment{yyDollar[1].attr}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:82
		{
			yyVAL.attrs = append(yyDollar[1].attrs, yyDollar[3].attr)
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/classad.y:84
		{
			yyVAL.attrs = yyDollar[1].attrs
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:89
		{
			yyVAL.attr = &ast.AttributeAssignment{Name: yyDollar[1].str, Value: yyDollar[3].expr}
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:94
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:99
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/classad.y:101
		{
			yyVAL.expr = &ast.ConditionalExpr{Condition: yyDollar[1].expr, TrueExpr: yyDollar[3].expr, FalseExpr: yyDollar[5].expr}
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:106
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:108
		{
			yyVAL.expr = &ast.BinaryOp{Op: "||", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:113
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:115
		{
			yyVAL.expr = &ast.BinaryOp{Op: "&&", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:120
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:122
		{
			yyVAL.expr = &ast.BinaryOp{Op: "|", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:127
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:129
		{
			yyVAL.expr = &ast.BinaryOp{Op: "^", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:134
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:136
		{
			yyVAL.expr = &ast.BinaryOp{Op: "&", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:141
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:143
		{
			yyVAL.expr = &ast.BinaryOp{Op: "==", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:145
		{
			yyVAL.expr = &ast.BinaryOp{Op: "!=", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:147
		{
			yyVAL.expr = &ast.BinaryOp{Op: "is", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:149
		{
			yyVAL.expr = &ast.BinaryOp{Op: "isnt", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:154
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:156
		{
			yyVAL.expr = &ast.BinaryOp{Op: "<", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:158
		{
			yyVAL.expr = &ast.BinaryOp{Op: ">", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:160
		{
			yyVAL.expr = &ast.BinaryOp{Op: "<=", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:162
		{
			yyVAL.expr = &ast.BinaryOp{Op: ">=", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:167
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:169
		{
			yyVAL.expr = &ast.BinaryOp{Op: "<<", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:171
		{
			yyVAL.expr = &ast.BinaryOp{Op: ">>", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:173
		{
			yyVAL.expr = &ast.BinaryOp{Op: ">>>", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:178
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:180
		{
			yyVAL.expr = &ast.BinaryOp{Op: "+", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:182
		{
			yyVAL.expr = &ast.BinaryOp{Op: "-", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:187
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:189
		{
			yyVAL.expr = &ast.BinaryOp{Op: "*", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:191
		{
			yyVAL.expr = &ast.BinaryOp{Op: "/", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:193
		{
			yyVAL.expr = &ast.BinaryOp{Op: "%", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:198
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/classad.y:200
		{
			yyVAL.expr = &ast.UnaryOp{Op: "-", Expr: yyDollar[2].expr}
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/classad.y:202
		{
			yyVAL.expr = &ast.UnaryOp{Op: "+", Expr: yyDollar[2].expr}
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/classad.y:204
		{
			yyVAL.expr = &ast.UnaryOp{Op: "!", Expr: yyDollar[2].expr}
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/classad.y:206
		{
			yyVAL.expr = &ast.UnaryOp{Op: "~", Expr: yyDollar[2].expr}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:211
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:213
		{
			yyVAL.expr = &ast.SelectExpr{Record: yyDollar[1].expr, Attr: yyDollar[3].str}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/classad.y:215
		{
			yyVAL.expr = &ast.SubscriptExpr{Container: yyDollar[1].expr, Index: yyDollar[3].expr}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/classad.y:217
		{
			yyVAL.expr = &ast.FunctionCall{Name: yyDollar[1].str, Args: yyDollar[3].exprlist}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:222
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:224
		{
			name, scope := ParseScopedIdentifier(yyDollar[1].str)
			yyVAL.expr = &ast.AttributeReference{Name: name, Scope: scope}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:229
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:231
		{
			yyVAL.expr = &ast.ListLiteral{Elements: yyDollar[2].exprlist}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:233
		{
			yyVAL.expr = &ast.RecordLiteral{ClassAd: yyDollar[1].classad}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:238
		{
			yyVAL.expr = &ast.IntegerLiteral{Value: yyDollar[1].integer}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:240
		{
			yyVAL.expr = &ast.RealLiteral{Value: yyDollar[1].real}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:242
		{
			yyVAL.expr = &ast.StringLiteral{Value: yyDollar[1].str}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:244
		{
			yyVAL.expr = &ast.BooleanLiteral{Value: yyDollar[1].boolean}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:246
		{
			yyVAL.expr = &ast.UndefinedLiteral{}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:248
		{
			yyVAL.expr = &ast.ErrorLiteral{}
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/classad.y:253
		{
			yyVAL.exprlist = []ast.Expr{}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:255
		{
			yyVAL.exprlist = yyDollar[1].exprlist
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/classad.y:260
		{
			yyVAL.exprlist = []ast.Expr{yyDollar[1].expr}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/classad.y:262
		{
			yyVAL.exprlist = append(yyDollar[1].exprlist, yyDollar[3].expr)
		}
	}
	goto yystack /* stack new state and value */
}
